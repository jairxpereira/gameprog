Rem Project: bitmaps
Rem Created: 18/08/2013 14:33:05

inicio:
global branco as integer = 0xffffff
global azul   as integer = 0x0000ff

tecla as string = ""

initsys("bitmaps.dba - Pressione 'q' para sair")

' Mostra menu e bitmap
menu()
carregar_mostrar_bmp()


' Faz leitura do teclado
teclado:
tecla = inkey$()

if tecla = "q" then goto final

' Manipulação do bitmap
if tecla = "b" then borrar_bmp()
if tecla = "c" then tst_copiar_bmp(0,0,127,127)
if tecla = "d" then sumir_bmp()
if tecla = "f" then virar_bmp()
if tecla = "l" then carregar_mostrar_bmp()
if tecla = "m" then espelhar_bmp()

' Mostra informações sobre o bitmap 1
info_bmp()
goto teclado

final:
delete bitmap 1
print
print " Pressione qualquer tecla para encerrar"
suspend for key
end

' ----- initsys() - Configuração básica da aplicação -----
function initsys(txt as string)
' configurando a janela
set window on
set window title txt
ink azul, branco
cls branco
set text opaque
endfunction

' ------ menu() - Apresenta menu da aplicação
function menu()
Set Current Bitmap 0
Text  10, 300, "l- Load Bitmap()":    Text 210, 300, "d- Fade Bitmap()"
Text  10, 320, "m- Mirror Bitmap()":  Text 210, 320, "b- Blur Bitmap()"
Text  10, 340, "f- Flip Bitmap()":    Text 210, 340, "c- Copy Bitmap()"
endfunction

' ------ carregar_mostrar_bmp() - Carrega e mostra um bitmap
function  carregar_mostrar_bmp()
Load Bitmap "c:\gdkmedia\bitmap\textura.bmp",1
Copy Bitmap 1,0
endfunction

' ------ espelhar_bmp() - Testa Mirror Bitmap
function espelhar_bmp()
Mirror Bitmap 1
Copy Bitmap 1,0
endfunction

' ------ virar_bmp() - Testa Flip Bitmap
function virar_bmp()
Flip Bitmap 1
Copy Bitmap 1,0
endfunction

' ------ sumir_bmp() - Testa Fade Bitmap
function sumir_bmp()
Fade Bitmap 1,80
Copy Bitmap 1,0
endfunction

' ------ borrar_bmp() - Testa Blur Bitmap
function borrar_bmp()
Blur Bitmap 1,5
Copy Bitmap 1,0
endfunction


' ------ tst_copiar_bmp() - Testa Copy Bitmap
function tst_copiar_bmp(nEsq as integer, nTop as integer, nDir as integer, nFun as integer)

' Font = bmp fonte  -  Dest = bmp destino
Font   as integer = 1
Dest   as integer = 0

' esqAlvo dirAlvo = ponto esquerdo e direito do destino
' topAlvo funAlvo = ponto superior e inferior do destino
esqAlvo     as integer = 300
topAlvo     as integer = 0
dirAlvo     as integer = 428
funAlvo     as integer = 120
Copy Bitmap Font, nEsq, nTop, nDir,nFun, Dest,esqAlvo, topAlvo, dirAlvo, funAlvo
endfunction


' ------ info_bmp() - Mostra configurações do bitmap
function info_bmp()
txt as string

' Dados de configuração do bitmap
nlargura       as integer
nAltura        as integer
nprofundidade  as integer
nvirado        as integer
nEspelhado     as integer

' Obtendo os dados do bitmap 1
nlargura      = Bitmap Width(1)
nAltura       = Bitmap Height(1)
nprofundidade = Bitmap Depth(1)
nvirado       = Bitmap Flipped(1)
nEspelhado    = Bitmap Mirrored(1)

' Mostrando os dados
Set Current Bitmap 0
txt = " Largura: " + str$(nLargura)
txt = txt + " Altura: " + str$(nAltura)
txt = txt + " Profundidade: " + str$(nprofundidade)
Text  10,260, txt

txt =  " Virado: " + str$(nvirado)
txt = txt + " Espelhado: " + str$(nEspelhado)
Text 10,280, txt
endfunction
